# -*- coding: utf-8 -*-
"""test (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ahcF4c_HklKLf1tgEuz68ZiZ2AmC-zmP
"""



from alphageometry import *
import alphageometry

alphageometry.DEFINITIONS = pr.Definition.from_txt_file("defs.txt", to_dict=True)
# load inference rules used in DD.
alphageometry.RULES = pr.Theorem.from_txt_file("rules.txt", to_dict=True)
_PROBLEMS_FILE = "examples.txt"
_PROBLEM_NAME = "euler"
# when using the language model,
# point names will be renamed to alphabetical a, b, c, d, e, ...
# instead of staying with their original names,
# in order to match the synthetic training data generation.
need_rename = False

# load problems from the problems_file,
problems = pr.Problem.from_txt_file(
  _PROBLEMS_FILE, to_dict=True, translate=need_rename
)

if _PROBLEM_NAME not in problems:
    raise ValueError(
        f'Problem name `{_PROBLEM_NAME}` '
        + f'not found in `{_PROBLEMS_FILE}`'
    )

this_problem = problems[_PROBLEM_NAME]

this_problem

_OUT_FILE = "results.txt"#
import sys

import sys
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
g, _ = gh.Graph.build_problem(this_problem, alphageometry.DEFINITIONS)
run_ddar(g, this_problem, _OUT_FILE)

